labs(x = "Chapter Progression", y = "Chapter") +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none")
book_sent %>%
mutate(index = round(index, 1)) %>%
group_by(chapter, index) %>%
summarise(sentiment = sum(sentiment)) %>%
ggplot(aes(index, rev(chapter), fill = sentiment)) +
geom_tile(color = "white") +
scale_fill_gradient() +
scale_x_continuous(, labels = scales::percent, expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
labs(x = "Chapter Progression", y = "Chapter") +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none")
ggplot(book_sent, aes(index, rev(chapter), fill = sentiment)) +
geom_tile(color = "white") +
scale_fill_gradient() +
scale_x_continuous(, labels = scales::percent, expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
labs(x = "Chapter Progression", y = "Chapter") +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none")
ggplot(book_sent, aes(index, reorder(chapter, rev(chapter)), fill = sentiment)) +
geom_tile(color = "white") +
scale_fill_gradient() +
scale_x_continuous(, labels = scales::percent, expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
labs(x = "Chapter Progression", y = "Chapter") +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none")
ggplot(book_sent, aes(index, reorder(chapter, forcats::fact_rev(chapter)), fill = sentiment)) +
geom_tile(color = "white") +
scale_fill_gradient() +
scale_x_continuous(, labels = scales::percent, expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
labs(x = "Chapter Progression", y = "Chapter") +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none")
ggplot(book_sent, aes(index, reorder(chapter, forcats::fct_rev(chapter)), fill = sentiment)) +
geom_tile(color = "white") +
scale_fill_gradient() +
scale_x_continuous(, labels = scales::percent, expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
labs(x = "Chapter Progression", y = "Chapter") +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none")
ggplot(book_sent, aes(index, reorder(chapter, forcats::fct_rev(as.character(chapter))), fill = sentiment)) +
geom_tile(color = "white") +
scale_fill_gradient() +
scale_x_continuous(, labels = scales::percent, expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
labs(x = "Chapter Progression", y = "Chapter") +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none")
ggplot(book_sent, aes(index, reorder(chapter, as.character(chapter)), fill = sentiment)) +
geom_tile(color = "white") +
scale_fill_gradient() +
scale_x_continuous(, labels = scales::percent, expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
labs(x = "Chapter Progression", y = "Chapter") +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none")
ggplot(book_sent, aes(index, reorder(chapter, as.factor(chapter)), fill = sentiment)) +
geom_tile(color = "white") +
scale_fill_gradient() +
scale_x_continuous(, labels = scales::percent, expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
labs(x = "Chapter Progression", y = "Chapter") +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none")
ggplot(book_sent, aes(index, reorder(chapter, as.factor(chapter, levels = rev(chapter))), fill = sentiment)) +
geom_tile(color = "white") +
scale_fill_gradient() +
scale_x_continuous(, labels = scales::percent, expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
labs(x = "Chapter Progression", y = "Chapter") +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none")
ggplot(book_sent, aes(index, reorder(chapter, as.factor(chapter, levels = rev(chapter)))), fill = sentiment)) +
geom_tile(color = "white") +
scale_fill_gradient() +
scale_x_continuous(, labels = scales::percent, expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
labs(x = "Chapter Progression", y = "Chapter") +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none")
rev(book_sent$chapter)
rev(unique(book_sent$chapter))
forcats::lvls_reorder(chapter)
forcats::lvls_reorder(book_sent$chapter)
factor(chapter)
factor(book_sent$chapter)
ggplot(book_sent, aes(index, factor(book_sent$chapter), fill = sentiment)) +
geom_tile(color = "white") +
scale_fill_gradient() +
scale_x_continuous(, labels = scales::percent, expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
labs(x = "Chapter Progression", y = "Chapter") +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none")
ggplot(book_sent, aes(index, factor(book_sent$chapter), fill = sentiment)) +
geom_tile(color = "white") +
scale_fill_gradient() +
scale_x_continuous(, labels = scales::percent, expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
labs(x = "Chapter Progression", y = "Chapter") +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none")
ggplot(book_sent, aes(index, factor(chapter, levels = rev(chapter)), fill = sentiment)) +
geom_tile(color = "white") +
scale_fill_gradient() +
scale_x_continuous(, labels = scales::percent, expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
labs(x = "Chapter Progression", y = "Chapter") +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none")
ggplot(book_sent, aes(index, factor(chapter, levels = rev(unique(chapter))), fill = sentiment)) +
geom_tile(color = "white") +
scale_fill_gradient() +
scale_x_continuous(, labels = scales::percent, expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
labs(x = "Chapter Progression", y = "Chapter") +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none")
order(unique(book_sent$chapter))
sort(unique(book_sent$chapter))
ggplot(book_sent, aes(index, factor(chapter, levels = sort(unique(chapter))), fill = sentiment)) +
geom_tile(color = "white") +
scale_fill_gradient() +
scale_x_continuous(, labels = scales::percent, expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
labs(x = "Chapter Progression", y = "Chapter") +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none")
ggplot(book_sent, aes(index, factor(chapter, levels = sort(unique(chapter))), fill = sentiment)) +
geom_tile(color = "white") +
scale_fill_gradient2() +
scale_x_continuous(, labels = scales::percent, expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
labs(x = "Chapter Progression", y = "Chapter") +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none")
?sort
ggplot(book_sent, aes(index, factor(chapter, levels = sort(unique(chapter), decreasing = TRUE)), fill = sentiment)) +
geom_tile(color = "white") +
scale_fill_gradient2() +
scale_x_continuous(, labels = scales::percent, expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
labs(x = "Chapter Progression", y = "Chapter") +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none")
ggplot(book_sent, aes(index, factor(chapter, levels = sort(unique(chapter), decreasing = TRUE)), fill = sentiment)) +
geom_tile(color = "white") +
scale_fill_gradient2() +
scale_x_continuous(labels = scales::percent, expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
labs(x = "Chapter Progression", y = "Chapter") +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none")
?scale_gill_gradient2
?scale_fill_gradient2
ggplot(book_sent, aes(index, factor(chapter, levels = sort(unique(chapter), decreasing = TRUE)), fill = sentiment)) +
geom_tile(color = "white") +
scale_fill_gradient2() +
scale_x_continuous(labels = scales::percent, expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
labs(x = "Chapter Progression", y = "Chapter") +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
#legend.position = "none")
)
ggplot(book_sent, aes(index, factor(chapter, levels = sort(unique(chapter), decreasing = TRUE)), fill = sentiment)) +
geom_tile(color = "white") +
scale_fill_gradient2() +
scale_x_continuous(labels = scales::percent, expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
labs(x = "Chapter Progression", y = "Chapter") +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "bottom")
?labs
?philosophers_stone
ggplot(book_sent, aes(index, factor(chapter, levels = sort(unique(chapter), decreasing = TRUE)), fill = sentiment)) +
geom_tile(color = "white") +
scale_fill_gradient2() +
scale_x_continuous(labels = scales::percent, expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
labs(x = "Chapter Progression", y = "Chapter") +
ggtitle("Sentiment of Harry Potter and the Philosopher's Stone",
subtitle = "Summary of the net sentiment score as you progress through each chapter") +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "bottom")
?theme
library(ggplot2)
?scale_fill_gradient
scale_color_gradient()
?scale_color_gradient()
library(tidyverse)      # data manipulation & plotting
library(stringr)        # text cleaning and regular expressions
library(tidytext)       # provides additional text mining functions
library(harrypotter)    # provides the first seven novels of the Harry Potter series
titles <- c("Philosopher's Stone", "Chamber of Secrets", "Prisoner of Azkaban",
"Goblet of Fire", "Order of the Phoenix", "Half-Blood Prince",
"Deathly Hallows")
books <- list(philosophers_stone, chamber_of_secrets, prisoner_of_azkaban,
goblet_of_fire, order_of_the_phoenix, half_blood_prince,
deathly_hallows)
series <- tibble()
for(i in seq_along(titles)) {
clean <- tibble(chapter = seq_along(books[[i]]),
text = books[[i]]) %>%
unnest_tokens(word, text) %>%
mutate(book = titles[i]) %>%
select(book, everything())
series <- rbind(series, clean)
}
# set factor to keep books in order of publication
series$book <- factor(series$book, levels = rev(titles))
series
book_words <- series %>%
count(book, word, sort = TRUE) %>%
ungroup()
series_words <- book_words %>%
group_by(book) %>%
summarise(total = sum(n))
book_words <- left_join(book_words, series_words)
book_words
book_words %>%
mutate(ratio = n / total) %>%
ggplot(aes(ratio, fill = book)) +
geom_histogram(show.legend = FALSE) +
scale_x_log10() +
facet_wrap(~ book, ncol = 2)
freq_by_rank <- book_words %>%
group_by(book) %>%
mutate(rank = row_number(),
`term freq` = n / total)
ggplot(freq_by_rank, aes(rank, `term freq`, color = book)) +
geom_line() +
scale_x_log10() +
scale_y_log10()
lower_rank <- freq_by_rank %>%
filter(rank < 500)
lm(log10(`term freq`) ~ log10(rank), data = lower_rank)
freq_by_rank %>%
ggplot(aes(rank, `term freq`, color = book)) +
geom_abline(intercept = -0.9414, slope = -0.9694, color = "gray50", linetype = 2) +
geom_line(size = 1.2, alpha = 0.8) +
scale_x_log10() +
scale_y_log10()
lower_rank <- freq_by_rank %>%
filter(rank < 500)
lm(log10(`term freq`) ~ log10(rank), data = lower_rank)
freq_by_rank %>%
ggplot(aes(rank, `term freq`, color = book)) +
geom_abline(intercept = -0.9414, slope = -0.9694, color = "gray50", linetype = 2) +
geom_point(size = 1.2, alpha = 0.8) +
scale_x_log10() +
scale_y_log10()
lower_rank <- freq_by_rank %>%
filter(rank < 500)
lm(log10(`term freq`) ~ log10(rank), data = lower_rank)
freq_by_rank %>%
ggplot(aes(rank, `term freq`, color = book)) +
geom_abline(intercept = -0.9414, slope = -0.9694, color = "gray50", linetype = 2) +
geom_point(size = 1.2, alpha = 0.8) +
geom_text(aes(word)) +
scale_x_log10() +
scale_y_log10()
geom_text
?geom_text
freq_by_rank %>%
ggplot(aes(rank, `term freq`, color = book)) +
geom_abline(intercept = -0.9414, slope = -0.9694, color = "gray50", linetype = 2) +
geom_point(size = 1.2, alpha = 0.8) +
geom_text(aes(label = word)) +
scale_x_log10() +
scale_y_log10()
lower_rank <- freq_by_rank %>%
filter(rank < 500)
lm(log10(`term freq`) ~ log10(rank), data = lower_rank)
freq_by_rank %>%
ggplot(aes(rank, `term freq`, color = book)) +
geom_abline(intercept = -0.9414, slope = -0.9694, color = "gray50", linetype = 2) +
geom_point(size = 1.2, alpha = 0.8) +
geom_text(aes(label = word)) +
facet_wrap(~book) +
scale_x_log10() +
scale_y_log10()
lower_rank <- freq_by_rank %>%
filter(rank < 500)
lm(log10(`term freq`) ~ log10(rank), data = lower_rank)
freq_by_rank %>%
ggplot(aes(rank, `term freq`, color = book)) +
geom_abline(intercept = -0.9414, slope = -0.9694, color = "gray50", linetype = 2) +
geom_line(size = 1.2, alpha = 0.8) +
scale_x_log10() +
scale_y_log10()
?unnest
series
titles <- c("Philosopher's Stone", "Chamber of Secrets", "Prisoner of Azkaban",
"Goblet of Fire", "Order of the Phoenix", "Half-Blood Prince",
"Deathly Hallows")
books <- list(philosophers_stone, chamber_of_secrets, prisoner_of_azkaban,
goblet_of_fire, order_of_the_phoenix, half_blood_prince,
deathly_hallows)
series <- tibble()
for(i in seq_along(titles)) {
clean <- tibble(chapter = seq_along(books[[i]]),
text = books[[i]]) %>%
unnest_tokens(word, text, token = "ngrams", n = 2) %>%
mutate(book = titles[i]) %>%
select(book, everything())
series <- rbind(series, clean)
}
# set factor to keep books in order of publication
series$book <- factor(series$book, levels = rev(titles))
series
series
titles <- c("Philosopher's Stone", "Chamber of Secrets", "Prisoner of Azkaban",
"Goblet of Fire", "Order of the Phoenix", "Half-Blood Prince",
"Deathly Hallows")
books <- list(philosophers_stone, chamber_of_secrets, prisoner_of_azkaban,
goblet_of_fire, order_of_the_phoenix, half_blood_prince,
deathly_hallows)
series <- tibble()
for(i in seq_along(titles)) {
clean <- tibble(chapter = seq_along(books[[i]]),
text = books[[i]]) %>%
unnest_tokens(bigram, text, token = "ngrams", n = 2) %>%
mutate(book = titles[i]) %>%
select(book, everything())
series <- rbind(series, clean)
}
# set factor to keep books in order of publication
series$book <- factor(series$book, levels = rev(titles))
series
series
series %>%
count(bigram, sort = TRUE)
series %>%
count(bigram, sort = TRUE)
series %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word,
!word2 %in% stop_words$word) %>%
count(word1, word2, sort = TRUE)
?unite
series %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word,
!word2 %in% stop_words$word) %>%
count(word1, word2, sort = TRUE) %>%
unite(bi-gram, word1, word2, sep = " ")
series %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word,
!word2 %in% stop_words$word) %>%
count(word1, word2, sort = TRUE) %>%
unite(bi-gram, c(word1, word2), sep = " ")
series %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word,
!word2 %in% stop_words$word) %>%
count(word1, word2, sort = TRUE) %>%
unite("bi-gram", c(word1, word2), sep = " ")
series %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word,
!word2 %in% stop_words$word) %>%
count(book, word1, word2, sort = TRUE) %>%
unite("bi-gram", c(word1, word2), sep = " ")
series %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word,
!word2 %in% stop_words$word) %>%
count(book, word1, word2, sort = TRUE) %>%
unite("bi-gram", c(word1, word2), sep = " ") %>%
ggplot(aes(`bi_gram`, n, fill = book)) +
geom_bar(stat = "identity", alpha = .8) +
facet_wrap(~ book)
series %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word,
!word2 %in% stop_words$word) %>%
count(book, word1, word2, sort = TRUE) %>%
unite("bigram", c(word1, word2), sep = " ") %>%
ggplot(aes(bigram, n, fill = book)) +
geom_bar(stat = "identity", alpha = .8) +
facet_wrap(~ book)
series %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word,
!word2 %in% stop_words$word) %>%
count(book, word1, word2, sort = TRUE) %>%
unite("bigram", c(word1, word2), sep = " ") %>%
ggplot(aes(bigram, n, fill = book)) +
geom_bar(stat = "identity", alpha = .8) +
facet_wrap(~ book, scales = "free")
series %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word,
!word2 %in% stop_words$word) %>%
count(book, word1, word2, sort = TRUE) %>%
unite("bigram", c(word1, word2), sep = " ") %>%
group_by(book) %>%
top_n(10) %>%
ungroup() %>%
ggplot(aes(bigram, n, fill = book)) +
geom_bar(stat = "identity", alpha = .8) +
facet_wrap(~ book, scales = "free")
series %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word,
!word2 %in% stop_words$word) %>%
count(book, word1, word2, sort = TRUE) %>%
unite("bigram", c(word1, word2), sep = " ") %>%
group_by(book) %>%
top_n(10) %>%
ungroup() %>%
ggplot(aes(reorder(bigram, n), n, fill = book)) +
geom_bar(stat = "identity", alpha = .8) +
facet_wrap(~ book, scales = "free") +
coord_flip()
devtools::install_github("dgrtwo/drlib")
series %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word,
!word2 %in% stop_words$word) %>%
count(book, word1, word2, sort = TRUE) %>%
unite("bigram", c(word1, word2), sep = " ") %>%
group_by(book) %>%
top_n(10) %>%
ungroup() %>%
ggplot(aes(drlib::reorder_within(bigram, n, book), n, fill = book)) +
geom_bar(stat = "identity", alpha = .8) +
drlib::scale_x_reordered() +
facet_wrap(~ book, ncol = 2, scales = "free") +
coord_flip()
series %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word,
!word2 %in% stop_words$word) %>%
count(book, word1, word2, sort = TRUE) %>%
unite("bigram", c(word1, word2), sep = " ") %>%
group_by(book) %>%
top_n(10) %>%
ungroup() %>%
ggplot(aes(drlib::reorder_within(bigram, n, book),
n, fill = book %>% forcats::fct_rev())) +
geom_bar(stat = "identity", alpha = .8, show.legend = FALSE) +
drlib::scale_x_reordered() +
facet_wrap(~ book, ncol = 2, scales = "free") +
coord_flip()
series %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word,
!word2 %in% stop_words$word) %>%
count(book, word1, word2, sort = TRUE) %>%
unite("bigram", c(word1, word2), sep = " ") %>%
group_by(book) %>%
top_n(10) %>%
ungroup() %>%
mutate(book = factor(book) %>% forcats::fct_rev()) %>%
ggplot(aes(drlib::reorder_within(bigram, n, book), n, fill = book)) +
geom_bar(stat = "identity", alpha = .8, show.legend = FALSE) +
drlib::scale_x_reordered() +
facet_wrap(~ book, ncol = 2, scales = "free") +
coord_flip()
